openapi: 3.0.2
info:
  title: iSignif
  description: Signifiez vos actes simplement grâce à notre réseau d’huissiers de justice
  version: "1"
  # termsOfService: https://killer.fr/tos
  contact:
    url: https://killer.fr/
    email: alexandre@rsseau.fr
  # license:
  #   name: "CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)"
  #   url: "https://openweathermap.org/price"
servers:
  - url: http://127.0.0.1:3000/api/v1/
    description: Local
  - url: https://killer.fr/api/v1/
    description: Production server

tags:
  - name: Games
    description: A game is an event who contains players and cards
  - name: Authentification
    description: Get a JWT token for protected endpoints
  - name: Players
    description: A player plays in a game
  - name: Cards
    description: A card is an action who link a player, an action and a target

paths:

  /games/{game_id}/players:
    get:
      summary: List all games's players
      tags: [Players]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/query_game_id'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        403:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a games's players
      tags: [Players]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/query_game_id'
        - $ref: '#/components/parameters/player_name'
        - $ref: '#/components/parameters/player_description'
        - $ref: '#/components/parameters/player_email'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        400:
          $ref: "#/components/responses/UnprocessableEntity"
        403:
          $ref: "#/components/responses/UnauthorizedError"

  /games:
    get:
      summary: List all games
      tags: [Games]
      security:
        - BearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        403:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a game
      tags: [Games]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/game_name'
        - $ref: '#/components/parameters/game_actions'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        403:
          $ref: "#/components/responses/UnauthorizedError"
  /games/{game_id}:
    delete:
      summary: delete a game
      tags: [Games]
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/query_game_id'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        403:
          $ref: "#/components/responses/UnauthorizedError"

  /tokens:
    post:
      tags:
        - Authentification
      summary: Obtain the JWT token required for authentification
      parameters:
        - $ref: '#/components/parameters/user_email'
        - $ref: '#/components/parameters/user_password'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        403:
          description: Email or password are invalid


# definitions:
components:
  securitySchemes:
    # ApiKeyAuth:
    #   name: Authorization
    #   in: header
    #   type: apiKey
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


  parameters:
    query_game_id:
      name: game_id
      in: path
      required: true
      schema:
        type: integer

    # user
    user_email:
      name: user[email]
      in: query
      required: true
      schema:
        type: string
        description: User email
        example: foo@bar.com
    user_password:
      name: user[password]
      in: query
      required: true
      schema:
        type: string
        description: User password
        example: "****"
    #game
    game_name:
      name: game[name]
      in: query
      required: true
      schema:
        type: string
        description: Game's name
        example: Birthday party
    game_actions:
      name: game[actions]
      in: query
      required: true
      schema:
        type: string
        description: Actions dispatched for players cards
        example: "Action 1\nAction2"
    # player
    player_name:
      name: player[name]
      in: query
      required: true
      schema:
        type: string
        description: Player's name displayed on the card
        example: John Doe
    player_description:
      name: player[description]
      in: query
      required: true
      schema:
        type: string
        description: Player's description displayed on the card
        example: Likes to drink a lot
    player_email:
      name: player[email]
      in: query
      required: true
      schema:
        type: string
        description: Player's email. Used to send an email when game starts
        example: john-doe@example.com


  responses:
    UnauthorizedError:
      description: API key is missing or invalid
    NotFoundError:
      description: The model does not exists
    UnprocessableEntity:
      description: missing one or more parameters to create the object
      content:
        application/json:
          schema:
            type: object

  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
          description: The JWT token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

    Game:
      description: Represent a game
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Birthday party
        started_on:
          type: string
          example: '2021-02-03T04:05:06'
        user_id:
          description: The owner of the game
          example: 1
          type: integer

    Player:
      description: Represent a player who belongs to a game
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: john-doe@example.fr
        name:
          type: string
          example: John Doe
        description:
          type: string
          example: 'Likes to drink a lot'
        game_id:
          description: The owner of the game
          type: integer
          example: 1
